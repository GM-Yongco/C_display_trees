these are sample binary tree outputs

------A
----/---\
--B-------C
-/-\-----/-\
D---E---F---G

14------------A
10--------/---7---\
6-----B------15-------C
4---/---\----11-----/---\
2-D---7---E---7---F---7---G
-/-\--5--/-\--5--/-\--5--/-\
H-3-I---J---K---L---M---N---O

30----------------------------0
22--------------------/------15------\
14------------A--------------31---------------A
10--------/---7---\----------23-----------/---7---\
6-----B------15-------C---------------C------15-------C
4---/---\----11-----/---\-----------/---\----11-----/---\
2-D---7---E---7---F---7---G-------F---7---G-------F---7---G
-/-\--5--/-\--5--/-\--5--/-\-----/-\--5--/-\-----/-\--5--/-\
H-3-I---J---K---L---M---N---O---H---I---J---K---L---M---N---O

depth : number of lines
1 : 1
2 : 3
3 : 5
4 : 7

depht : number of characters on base/width
1 : 1
2 : 5   = 1 + 2 + 3
3 : 13  = 5 + 5 + 3
4 : 29  = 13 + 13 + 3

depth : max elements
1 : 1
2 : 3 	= 1 + 2
3 : 7 	= 3 + 4
4 : 15	= 7 + 8

depth: elem_num: height_index: width_index
2	: 0		:0: 2 = width/2

2	: 1		:2: 0 = width-1/2
2	: 2		:2: 4 = width(depth)/2 + 2

-----------------------------

3	: 0		:0: 6 = width(depth)/2

3	: 1		:2: 2
3	: 2		:2: 10 = 2 + 2 + width/2

3	: 3		:4: 0
3	: 4		:4: 4
3	: 5		:4: 8
3	: 6		:4: 12 = width-1

-----------------------------

4	: 0		:0: 14 = width(depth-0)/2

4	: 1		:2: 6  = width(depth-1)/2 + (((width/2) + 2) * 0)
4	: 2		:2: 22 = width(depth-1)/2 + (((width/2) + 2) * 1)

height:
elem num+1 <= 2^2
(1)*2 = 2

4	: 3		:4: 2  = width(depth-2)/2 + (((width-1/2) + 2) * 0)
4	: 4		:4: 10 = width(depth-2)/2 + (((width-1/2) + 2) * 1)
4	: 5		:4: 18 = width(depth-2)/2 + (((width-1/2) + 2) * 2)
4	: 6		:4: 26 = width(depth-2)/2 + (((width-1/2) + 2) * 3)

height:
elem num+1 < 2^3
(3-1)*2 = 4


4	: 7		:6: 0  = width(depth-3)/2 + ((((width-2)/2) + 2) * 0)
4	: 8		:6: 4  = width(depth-3)/2 + ((((width-2)/2) + 2) * 1)
4	: 9		:6: 8  = width(depth-3)/2 + ((((width-2)/2) + 2) * 2)
4	: 10	:6: 12 = width(depth-3)/2 + ((((width-2)/2) + 2) * 3)
4	: 11	:6: 16 = width(depth-3)/2 + ((((width-2)/2) + 2) * 4)
4	: 12	:6: 20 = width(depth-3)/2 + ((((width-2)/2) + 2) * 5)
4	: 13	:6: 24 = width(depth-3)/2 + ((((width-2)/2) + 2) * 6)
4	: 14	:6: 28 = width(depth-3)/2 + ((((width-2)/2) + 2) * 7)

height:
elem num < 2^4
(4-1)*2 = 6

------------------------------------

2^4

1:0 2^1 is greater

2:1 2^2 is greater
3:1

4:2 2^3 is greater
5:2
6:2
7:2

8:3 2^4 is greater
9:3
10
11
12
13
14
15

------------------------------------

1:0 = %1

2:0
3:1 = %2

4:0
5:1
6:2
7:3 = %4

8   :0
9   :1
1   :2
11  :3
12  :4
13  :5
14  :6
15  :7 = %8

------------------------------------

14:22
6:10
2:4
0:1

------------------------------------

node index: left child: right child
0:1:2
1:3:4
2:5:6
3:7:8
4:9:10
5:11:12
6:13:14

heap[i*2 + 1] = heap[i]->left;
heap[i*2 + 2] = heap[i]->rite;

get_parent = (i-1)/2